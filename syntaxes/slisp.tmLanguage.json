{
  "name": "Sci-Lisp",
  "scopeName": "source.slisp",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#string"
    },
    {
      "include": "#keyword-symbol"
    },
    {
      "include": "#type-annotation"
    },
    {
      "include": "#mark"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#special-variable"
    },
    {
      "include": "#sexp"
    }
  ],
  "repository": {
    "comment": {
      "name": "comment.line.semicolon.slisp",
      "begin": ";",
      "end": "$",
      "patterns": [
        {
          "name": "entity.name.tag.slisp",
          "match": "(?<=;)\\s*(TODO|FIXME|XXX|BUG|HACK|NOTE):*"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "name": "constant.numeric.binary.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')-?0[bB][01]+(_*[01]+)*(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.numeric.octal.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')-?0[oO][0-7]+(_*[0-7]+)*(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.numeric.hexadecimal.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')-?0[xX][0-9a-zA-Z]+(_*[0-9a-zA-Z]+)*(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.numeric.complex.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')-?((\\d+(_*\\d+)*|\\d+(_*\\d+)*\\.|(\\d+(_*\\d+)*\\.\\d+(_*\\d+)*|\\d+(_*\\d+)*)(e[-+]?\\d+(_*\\d+)*)?)[-+])?(\\d+(_*\\d+)*|\\d+(_*\\d+)*\\.|(\\d+(_*\\d+)*\\.\\d+(_*\\d+)*|\\d+(_*\\d+)*)(e[-+]?\\d+(_*\\d+)*)?)[jJ](?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.numeric.float.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')-?(\\d+(_*\\d+)*\\.|(\\d+(_*\\d+)*\\.\\d+(_*\\d+)*|\\d+(_*\\d+)*)(e[-+]?\\d+(_*\\d+)*)?)(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.numeric.integer.slisp",
          "match": "(?<=(^|\\s|\\(|\\[|\\{|\\,|\\||'))-?(\\d+(_*\\d+)*)(?=(\\s|\\)|\\]|\\}|\\,|\\|))"
        },
        {
          "name": "constant.numeric.infinite.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')-?inf(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.numeric.nan.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')nan(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.language.nil.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')nil(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "constant.language.boolean.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|')(true|false)(?=(\\s|\\)|\\]|\\}|\\,))"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "name": "string.regexp.slisp",
          "begin": "#\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.slisp"
            }
          ]
        },
        {
          "name": "string.quoted.double.slisp",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.slisp"
            }
          ]
        }
      ]
    },
    "keyword-symbol": {
      "patterns": [
        {
          "name": "constant.language.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,|'):[a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*(?=(\\s|\\)|\\]|\\}|\\,))"
        }
      ]
    },
    "mark": {
      "patterns": [
        {
          "name": "markup.quote.quoted.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)'+(?!\\b(false|true|nil|nan|inf|:)\\b)(-(?!\\binf\\b)[a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/#]*|[a-zA-Z!$%=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/#]*)(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "markup.quote.quote.slisp",
          "match": "'"
        },
        {
          "name": "entity.name.tag.autogen.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)[a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*#(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "markup.quote.sharp.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)#(?=(\\s|\\)|\\]|\\}|\\,|\\{))"
        },
        {
          "name": "markup.quote.and.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)&(?=(\\s|\\,))"
        },
        {
          "name": "variable.parameter.unquote.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)~@?[a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*(?=(\\s|\\)|\\]|\\}|\\,))"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.control.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)(def|const|let|set!|defn|fn|return|if|when|do|cond|switch|for|while|break|continue|struct|enum|method|macro|try|catch|finally|throw|import|export|typedef)(?=(\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "variable.language.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)self(?=(\\.|\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "entity.name.function.slisp",
          "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)=>(?=(\\.|\\s|\\)|\\]|\\}|\\,))"
        },
        {
          "name": "entity.name.tag.slisp",
          "match": "\\|"
        }
      ]
    },
    "type-annotation": {
      "name": "storage.type.slisp",
      "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)#[a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*(?=(\\[|\\s|\\)|\\]|\\}|\\,))"
    },
    "special-variable": {
      "name": "variable.parameter.slisp",
      "match": "(?<=^|\\s|\\(|\\[|\\{|\\,)\\*[a-zA-Z0-9!$%\\-=^+*<>?_/]+\\*?(?=(\\s|\\)|\\]|\\}|\\,))"
    },
    "sexp": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#string"
        },
        {
          "include": "#keyword-symbol"
        },
        {
          "include": "#mark"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#type-annotation"
        },
        {
          "include": "#special-variable"
        },
        {
          "include": "#symbol"
        },
        {
          "include": "#sexp"
        },
        {
          "match": "(?<=set!|const|def|defn|enum|struct|macro)(\\,|\\s)+([a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*)(?=(\\s|\\)|\\]|\\}|\\,))",
          "captures": {
            "2": {
              "name": "variable.parameter.slisp"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "match": "(?<=import)(\\s|\\,)+([a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*)",
          "captures": {
            "2": {
              "name": "variable.parameter.slisp"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "punctuation.import.slisp",
          "match": "(?<=:as)(\\s|\\,)+([a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*)",
          "captures": {
            "2": {
              "name": "variable.parameter.slisp"
            }
          }
        },
        {
          "name": "punctuation.method.slisp",
          "begin": "(?<=method)(\\s|\\,)+\\[",
          "end": "(?=\\])",
          "patterns": [
            {
              "name": "variable.parameter.slisp",
              "match": "[a-zA-Z!$%\\-=^+*<>?_/][a-zA-Z0-9!$%\\-=^+*<>?_/]*"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "match": "(?<=\\()([^\\[]+?)(?=\\s|\\,|\\))",
          "captures": {
            "1": {
              "name": "entity.name.function.slisp"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    }
  }
}
